<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2009-2011, tempus-fugit committers
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>Changes</title>
        <author>Toby Weston</author>
    </properties>

    <body>
        <section name="Releases">
        </section>

        <section name="1.2-SNAPSHOT">
            <p>Snapshot release</p>

            <subsection name="Updates">
                <ul>
                    <li>
                        <h4>Public constructor for StopWatch</h4>
                        <p>
                            Formally, to construct a new StopWatch, you'd call <code>StopWatch.start()</code> to make it
                            clear that on construction the stop watch is also started. For clients that don't need to be
                            so explicit, you can now construct (and start) a <code>StopWatch</code> through it's public
                            constructor.
                        </p>
                    </li>
                </ul>
            </subsection>

            <subsection name="New Features">
                <ul>
                    <li>
                        <h4>Added timeout behaviour to <code>WaitFor.waitOrTimeout</code></h4>
                        <p>
                            Calling <code>waitOrTimeout</code> will through a <code>TimeoutException</code> on timeout.
                            You can now call an overloaded method and pass in a <code>Callable</code> that will be
                            executed on timeout and this version no longer throws a <code>TimeoutException</code>. For
                            example,
                        </p>
                        <source>
waitOrTimeout(serverIsShutdown(), new Callable&lt;Void, RuntimeException&gt;() {
    @Override
    public Void call() throws RuntimeException {
        notifyObservers(new FailedToShutdownEvent());
        return null;
    }
}, timeout(millis(500)));
                        </source>
                    </li>
                    <li>
                        <h4>
                            Added simple static method to wrap checked to runtime exception and throw
                        </h4>
                        <p>
                            So, for example, you can do something like this.
                        </p>
                        <source>
ExceptionWrapper.throwAsRuntimeException(new IOException("checked exception"));
                        </source>
                        <p>
                            Useful for migrating legacy code that rely on checked exceptions everywhere to a more liberated
                            style of throwing runtime exceptions and dealing with them at the boundaries. For the eagle
                            eyed however, you'll likely comment that throwing <code>RuntimeException</code> everywhere
                            isn't as good as throwing specific <b>sub-classes</b> of <code>RuntimeException</code> to
                            be able to deal with these more effectively. Therefore, there's an alternative implementation
                            which will throw any checked exception into a specific sub-class of a runtime exception.
                            For example,
                        </p>
                        <source>
ExceptionWrapper.throwException(new IOException("cheese"), as(SomeSubclassOfRuntimeException.class));
                        </source>
                    </li>
                </ul>
            </subsection>

            <subsection name="Updates">
                <ul>
                    <li><h4>Removed Deprecated methods</h4>
                    <p>
                        Removed deprecated methods using <code>Duration</code> when there is a new (since 1.1) equivalent
                        using a <code>Timeout</code>. You can use the timeout version of the methods instead.
                    </p>
                    <p>
                        Removed methods include
                    </p>
                        <ul>
                            <li>
                                <p><code>ExecutorShutdownService.waitingForShutdown(Duration timeout)</code></p>
                            </li>
                            <li>
                                <p><code>WaitFor.waitOrTimeout(Condition condition, Duration duration)</code></p>
                            </li>
                            <li>
                                <p><code>WaitFor.waitOrTimeout(Condition condition, Duration duration, StopWatch stopWatch)</code></p>
                            </li>
                        </ul>
                    </li>
                </ul>
            </subsection>

            <subsection name="Bug Fixes">
            </subsection>

        </section>

        <section name="1.1">
            <p><b>Current release</b>, release date April 2011
            </p>

            <subsection name="New Features">
                <ul>
                    <li><h4>New CompositeFactory class</h4>
                    <p>
                        Added <code>CompositeFactory</code>. Pass in a list of factories and they will be called in sequence,
                        trying the next on failure until all have been attempted. See the <a href="xref/com/google/code/tempusfugit/CompositeFactory.html">class</a>
                        and <a href="xref-test/com/google/code/tempusfugit/CompositeFactoryTest.html">test</a> for an example.
                    </p>
                    </li>

                    <li><h4>Wrap any exception as another</h4>
                        <p>
                            Added the <code>ExceptionWrapper</code> class to wrap any exception as another. Useful when
                            calling out to components when you usually catch and rethrow as application exception.
                        </p>
                        <p>
                            For example,
                        </p>
                        <source>ExceptionWrapper.wrapAnyException(new Callable&lt;Object&gt;() {
    @Override       
    public Object call() throws ServiceException {
        // nasty code throwing a bunch of exceptions
    }
}, WithException.with(CalendarException.class));
                        </source>
                    </li>

                    <li><h4>New MatcherCondition class</h4>
                        <p>
                            Added a <code>MatcherCondition</code> to the <code>Conditions</code> class. Useful for utilising
                            Hamcrest Matchers as <code>Condition</code>s.
                        </p>
                        <p>
                            For example,
                        </p>
                        <source>WaitFor.waitOrTimeout(<b>Conditions.assertion("hello", is(not(equalTo("goodbye"))))</b>, timeout(millis(100)));</source>
                    </li>

                 </ul>      
            </subsection>

            <subsection name="Updates">
                <ul>
                    <li><h4>Java 1.6 Support</h4>
                    <p>
                        Support for Java 1.6.
                    </p>
                    </li>
                    <li><h4>Renamed DateFactory to Clock</h4>
                    <p>
                        Renamed <code>DateFactory</code> to <code>Clock</code>, thanks to Alex for the suggestion.
                    </p>
                    </li>

                    <li><h4>Renamed DefaultClock to RealClock</h4>
                    <p>
                        Renamed <code>DefaultClock</code> (formally <code>DefaultDateFactory</code>) to <code>RealClock</code>.
                    </p>
                    </li>

                    <li><h4>Updated Factory interface</h4>
                        <p>
                            Updated the <code>Factory</code> interface to throw FactoryException.
                        </p>
                    </li>

                    <li><h4>Updated Timeout class with static creation method</h4>
                    <p>
                        Updated the <code>Timeout</code> class to use a private constructor but a public static creation method <code>timeout()</code>.
                    </p>
                    <p>Use</p>
                    <source>Timeout.timeout(Duration.seconds(10))</source>
                    <p>instead of </p>
                    <source>new Timeout(Duration.seconds(10))</source>
                    </li>

                    <li><h4>Updated WaitFor to take a Timeout not a Duration </h4>
                    <p>
                        Updated <code>WaitFor.waitOrTimeout</code> to take in a <code>Timeout</code> object rather than
                        a <code>Duration</code>.
                    </p>
                    <p>
                        For example,
                    </p>
                    <source>waitOrTimeout(serverStartup(), timeout(seconds(20)));</source>
                    </li>

                    <li><h4>WaitFor takes a configurable sleep period</h4>
                    <p>
                        Updated <code>WaitFor.waitOrTimeout</code> to use a configurable sleep period. It was previously
                        hardcoded to 100 ms (which is still the default if you don't pass in a sleep period).
                    </p>
                    <p>
                        To pass in a custom sleep period, implement the <code>Sleeper</code> interface or use the default
                        <code>ThreadSleep</code> class which uses <code>Thread.sleep(...)</code> under the covers.
                    </p>
                    <p>For example,</p>
                    <source>waitOrTimeout(condition, timeout, new ThreadSleep(millis(100));</source>
                    </li>

                </ul>
            </subsection>

            <subsection name="Bug Fixes">
                <ul>
                    <li><h4>Fixed "Unexpected behaviour using ConcurrentTestRunner, RepeatingRule and a sleep in test"</h4>
                        <p>
                            Fixed <a href="http://code.google.com/p/tempus-fugit/issues/detail?id=7">Bug #7</a> whereby 
                            tests that took longer than 10 seconds wouldn't run up in seperate threads. See the fix 
                            <a href="http://code.google.com/p/tempus-fugit/source/detail?r=136">change set</a>.
                        </p>
                    </li>

                    <li><h4>InterruptCapturingThread made non-final</h4>
                        <p>
                            <code>InterruptCapturingThread</code> non-final. It's designed to be sub-classed. Fixes
                            <a href="http://code.google.com/p/tempus-fugit/issues/detail?id=4">Bug #4</a>.
                        </p>
                    </li>

                    <li><h4>Updated DeadlockDetector to support Lock based deadlocks</h4>
                        <p>
                            <code>DeadlockDetector</code> now supports <code>Lock</code> based deadlocks not just
                            java intrinsic (monitor) based deadlocks. Fixes
                            <a href="http://code.google.com/p/tempus-fugit/issues/detail?id=3">Bug #3</a>.
                        </p>
                    </li>
                </ul>

            </subsection>
        </section>

        <section name="1.0">
            <p><b>Initial release</b>, 17th January 2010
            </p>
        </section>
    </body>
</document>